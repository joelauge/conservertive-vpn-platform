# Ansible playbook for ConSERVERtive VPN Server Configuration

---
- name: Configure ConSERVERtive VPN Servers
  hosts: vpn_servers
  become: yes
  vars:
    vpn_user: conservative
    vpn_group: conservative
    openvpn_port: 1194
    wireguard_port: 51820
    ikev2_port: 500
    
  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: yes
        autoremove: yes
        
    - name: Install required packages
      apt:
        name:
          - openvpn
          - wireguard
          - strongswan
          - iptables-persistent
          - fail2ban
          - ufw
          - curl
          - wget
          - htop
          - cloudflared
        state: present
        
    - name: Create VPN user and group
      user:
        name: "{{ vpn_user }}"
        group: "{{ vpn_group }}"
        system: yes
        shell: /bin/false
        home: /etc/openvpn
        create_home: no
        
    - name: Configure OpenVPN
      template:
        src: openvpn-server.conf.j2
        dest: /etc/openvpn/server.conf
        owner: root
        group: root
        mode: '0644'
      notify: restart openvpn
      
    - name: Generate OpenVPN certificates
      command: >
        /usr/share/easy-rsa/easyrsa
        --batch
        --req-cn={{ inventory_hostname }}
        gen-req
        {{ inventory_hostname }}
        nopass
      args:
        chdir: /etc/openvpn/easy-rsa
      when: not ansible_check_mode
      
    - name: Configure WireGuard
      template:
        src: wg0.conf.j2
        dest: /etc/wireguard/wg0.conf
        owner: root
        group: root
        mode: '0600'
      notify: restart wireguard
      
    - name: Configure strongSwan (IKEv2)
      template:
        src: ipsec.conf.j2
        dest: /etc/ipsec.conf
        owner: root
        group: root
        mode: '0644'
      notify: restart strongswan
      
    - name: Configure firewall rules
      ufw:
        rule: "{{ item.rule }}"
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      loop:
        - { rule: 'allow', port: '{{ openvpn_port }}', proto: 'udp' }
        - { rule: 'allow', port: '{{ wireguard_port }}', proto: 'udp' }
        - { rule: 'allow', port: '{{ ikev2_port }}', proto: 'udp' }
        - { rule: 'allow', port: '4500', proto: 'udp' }
        - { rule: 'allow', port: '22', proto: 'tcp' }
        - { rule: 'allow', port: '80', proto: 'tcp' }
        - { rule: 'allow', port: '443', proto: 'tcp' }
        
    - name: Enable UFW
      ufw:
        state: enabled
        
    - name: Configure fail2ban
      template:
        src: jail.local.j2
        dest: /etc/fail2ban/jail.local
        owner: root
        group: root
        mode: '0644'
      notify: restart fail2ban
      
    - name: Configure Cloudflare Tunnel
      template:
        src: cloudflared.yml.j2
        dest: /etc/cloudflared/config.yml
        owner: root
        group: root
        mode: '0644'
      notify: restart cloudflared
      
    - name: Enable and start services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - openvpn@server
        - wg-quick@wg0
        - strongswan
        - fail2ban
        - cloudflared
        
    - name: Configure log rotation
      template:
        src: logrotate-vpn.j2
        dest: /etc/logrotate.d/vpn
        owner: root
        group: root
        mode: '0644'
        
  handlers:
    - name: restart openvpn
      systemd:
        name: openvpn@server
        state: restarted
        
    - name: restart wireguard
      systemd:
        name: wg-quick@wg0
        state: restarted
        
    - name: restart strongswan
      systemd:
        name: strongswan
        state: restarted
        
    - name: restart fail2ban
      systemd:
        name: fail2ban
        state: restarted
        
    - name: restart cloudflared
      systemd:
        name: cloudflared
        state: restarted
