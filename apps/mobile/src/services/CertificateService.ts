import * as SecureStore from 'expo-secure-store';

export interface Certificate {
  id: string;
  name: string;
  type: 'client' | 'ca' | 'server';
  data: string;
  expiresAt: Date;
}

class CertificateService {
  private readonly CERT_STORE_KEY = 'conservertive_certificates';

  async installCertificate(cert: Certificate): Promise<boolean> {
    try {
      const certs = await this.getCertificates();
      certs.push(cert);
      await this.saveCertificates(certs);
      return true;
    } catch (error) {
      console.error('Certificate installation failed:', error);
      return false;
    }
  }

  async getCertificates(): Promise<Certificate[]> {
    try {
      const data = await SecureStore.getItemAsync(this.CERT_STORE_KEY);
      return data ? JSON.parse(data) : [];
    } catch (error) {
      console.error('Failed to get certificates:', error);
      return [];
    }
  }

  async generateClientCertificate(userId: string): Promise<Certificate> {
    // Generate client certificate for user
    const cert: Certificate = {
      id: `client_${userId}_${Date.now()}`,
      name: `ConSERVERtive Client Cert - ${userId}`,
      type: 'client',
      data: this.generateMockCertificate(),
      expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000) // 1 year
    };
    
    await this.installCertificate(cert);
    return cert;
  }

  private generateMockCertificate(): string {
    // Mock certificate data - in production, this would be generated by the backend
    return `-----BEGIN CERTIFICATE-----
MIICljCCAX4CAQAwDQYJKoZIhvcNAQELBQAwRTELMAkGA1UEBhMCVVMxEzARBgNV
BAgMCkNhbGlmb3JuaWExFjAUBgNVBAoMDUV4YW1wbGUgQ29ycDEUMBIGA1UEAwwL
ZXhhbXBsZS5jb20wHhcNMjMwMTAxMDAwMDAwWhcNMjQwMTAxMDAwMDAwWjBEMQsw
CQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UECgwNRXhhbXBs
ZSBDb3JwMRMwEQYDVQQDDApjbGllbnQxMjM0MFkwEwYHKoZIzj0CAQYIKoZIzj0D
AQcDQgAE...
-----END CERTIFICATE-----`;
  }

  private async saveCertificates(certs: Certificate[]): Promise<void> {
    await SecureStore.setItemAsync(this.CERT_STORE_KEY, JSON.stringify(certs));
  }
}

export default new CertificateService();






